name: Tests CI Pipeline

on: [push]

env:
  ALLURE_REPORT_DIR: "allure-report"
  ALLURE_RESULTS_DIR: "allure-results"

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          sparse-checkout: "history"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-playwright
          playwright install chromium
          playwright install-deps

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Allure CLI –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
      - name: Install Allure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          curl -o allure-2.24.0.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.tgz
          sudo tar -zxvf allure-2.24.0.tgz -C /usr/local
          echo "/usr/local/allure-2.24.0/bin" >> $GITHUB_PATH

      - name: Prepare directories
        run: |
          mkdir -p ${{ env.ALLURE_RESULTS_DIR }}/history
          [ -d "gh-pages/history" ] && cp -R gh-pages/history/* ${{ env.ALLURE_RESULTS_DIR }}/history/ || echo "No history found"

      - name: Run tests
        run: |
          xvfb-run -a pytest --alluredir=${{ env.ALLURE_RESULTS_DIR }}

      - name: Generate Allure report
        if: success() || failure()
        run: |
          if [ -d "${{ env.ALLURE_RESULTS_DIR }}" ]; then
            /usr/local/allure-2.24.0/bin/allure generate ${{ env.ALLURE_RESULTS_DIR }} --clean -o ${{ env.ALLURE_REPORT_DIR }}
          else
            echo "Error: Allure results directory not found!"
            exit 1
          fi

      - name: Verify report generation
        run: |
          [ -d "${{ env.ALLURE_REPORT_DIR }}" ] || exit 1
          [ -f "${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json" ] || exit 1

      - name: Parse test results
        id: allure-stats
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
          SUMMARY_FILE="${{ env.ALLURE_REPORT_DIR }}/widgets/summary.json"
          if [ ! -f "$SUMMARY_FILE" ]; then
            echo '{"statistic":{"total":0,"passed":0,"failed":0,"skipped":0,"broken":0,"canceled":0}}' > "$SUMMARY_FILE"
          fi

          TOTAL=$(jq -r '.statistic.total // 0' "$SUMMARY_FILE")
          PASSED=$(jq -r '.statistic.passed // 0' "$SUMMARY_FILE")
          FAILED=$(jq -r '.statistic.failed // 0' "$SUMMARY_FILE")
          SKIPPED=$(jq -r '.statistic.skipped // 0' "$SUMMARY_FILE")
          BROKEN=$(jq -r '.statistic.broken // 0' "$SUMMARY_FILE")
          CANCELED=$(jq -r '.statistic.canceled // 0' "$SUMMARY_FILE")

          {
            echo "TOTAL=$TOTAL"
            echo "PASSED=$PASSED"
            echo "FAILED=$FAILED"
            echo "SKIPPED=$SKIPPED"
            echo "BROKEN=$BROKEN"
            echo "CANCELED=$CANCELED"
          } >> $GITHUB_OUTPUT

      - name: Update Allure history
        if: success() || failure()
        run: |
          [ -d "${{ env.ALLURE_REPORT_DIR }}/history" ] && \
            cp -R ${{ env.ALLURE_REPORT_DIR }}/history/* gh-pages/history/ || \
            echo "No history to update"

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: ${{ env.ALLURE_REPORT_DIR }}
          clean: true
          clean-exclude: "history"

      - name: Determine final status
        id: final-status
        if: always()
        run: |
          FAILED=${{ steps.allure-stats.outputs.FAILED || 0 }}
          BROKEN=${{ steps.allure-stats.outputs.BROKEN || 0 }}
          
          if [ "$FAILED" -gt 0 ] || [ "$BROKEN" -gt 0 ]; then
            echo "FINAL_STATUS=‚ùå –û–®–ò–ë–ö–ò" >> $GITHUB_OUTPUT
            echo "FINAL_MESSAGE=‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤!</b>" >> $GITHUB_OUTPUT
            echo "EMOJI=‚ùå" >> $GITHUB_OUTPUT
          else
            echo "FINAL_STATUS=‚úÖ –£–°–ü–ï–®–ù–û" >> $GITHUB_OUTPUT
            echo "FINAL_MESSAGE=üéâ <b>–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!</b>" >> $GITHUB_OUTPUT
            echo "EMOJI=‚úÖ" >> $GITHUB_OUTPUT
          fi
          echo "Status determined: ${{ steps.final-status.outputs.FINAL_STATUS }}"

      - name: Send Telegram notification
        if: always()
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            <b>üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</b>
            
            <b>–ü—Ä–æ–µ–∫—Ç:</b> ${{ github.repository }}
            <b>–í–µ—Ç–∫–∞:</b> ${{ github.ref_name }}
            <b>–°—Ç–∞—Ç—É—Å:</b> ${{ steps.final-status.outputs.EMOJI }}
            
            <b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> (${{ steps.allure-stats.outputs.TOTAL }} —Ç–µ—Å—Ç–æ–≤):
            <code>‚îÇ</code> ‚Ä¢ ‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> ${{ steps.allure-stats.outputs.PASSED }}
            <code>‚îÇ</code> ‚Ä¢ ‚ùå <b>–£–ø–∞–≤—à–∏—Ö:</b> ${{ steps.allure-stats.outputs.FAILED }}
            <code>‚îÇ</code> ‚Ä¢ ‚è© <b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö:</b> ${{ steps.allure-stats.outputs.SKIPPED }}
            ${{ steps.allure-stats.outputs.BROKEN != '0' && '<code>‚îÇ</code> ‚Ä¢ üõ† <b>–°–ª–æ–º–∞–Ω–Ω—ã—Ö:</b> ' || '' }}${{ steps.allure-stats.outputs.BROKEN }}
            
            <b>üîó –°—Å—ã–ª–∫–∏</b>:
            <code>‚îÇ</code> ‚Ä¢ <a href="https://${{ github.repository_owner }}.github.io/${{ github.repository }}/${{ env.ALLURE_REPORT_DIR }}/">Allure Report</a>
            <code>‚îÇ</code> ‚Ä¢ <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a>
            
            ${{ steps.final-status.outputs.FINAL_MESSAGE }}
          format: html
          disable_web_page_preview: true